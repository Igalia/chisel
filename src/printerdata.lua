#! /usr/bin/env lua
--
-- printerdata.lua
-- Copyright (C) 2012 Adrian Perez <aperez@igalia.com>
--
-- Distributed under terms of the MIT license.
--

local sprintf  = string.format
local tconcat  = table.concat
local tinsert  = table.insert
local tostring = tostring
local ipairs   = ipairs
local type     = type


local function ppd_attribute (ppdname, attrname, optional)
	return function (data)
		if data[attrname] == nil then
			if optional then
				return sprintf ("*%% Attribute %s (%s) is undefined", ppdname, attrname)
			end
			error ("No attribute '" .. attrname .. "' in printer data", 2)
		end
		return sprintf ("*%s: \"%s\"", ppdname, data[attrname])
	end
end


local function ppd_template_options (data)
	return "" -- TODO
end


-- Template for generated PPD files:
--
--	* Strings are emitted as-is, followed by a newline character.
--	* Functions are called passing the printer data object as only
--	  argument. They should return a string, which will get emitted
--	  as output.
--
local ppd_template = {
	-- Standard PPD header, and info blob
	[[*PPD-Adoble: "4.3"]],
	[[*% PPD generated by chisel-ppd version ]] .. chisel.version;

	-- XXX Those hardcoded values should go away at some point!
	[[*LanguageVersion: English]],
	[[*LanguageEncoding: Latin1]],

	-- Manufacturer, model names, etc
	ppd_attribute ("1284DeviceID", "ieee1284_id", true);
	ppd_attribute ("Manufacturer", "manufacturer");
	ppd_attribute ("ModelName",    "model");

	-- Extra redundant model infos which can be derived from the above
	function (data)
		return sprintf ("*Product: \"(%s)\"\n\z
			               *ShortNickName: \"%s\"\n\z
			               *NickName: \"%s %s\"",
										 data.model, data.model,
										 data.manufacturer, data.model)
	end;

	-- Color model
	function (data)
		local colors = data.colorspace
		local retval = "*ColorDevice: False\n\z
			              *DefaultColorSpace: Gray"

		if colors == nil then
			colors = "gray"
		end

		-- For the moment, only grayscale is supported. Anything else
		-- causes an error to be raised.
		if colors ~= "gray" and colors ~= "grey" then
			error ("Color space '" .. tostring (colors) .. "' is not supported")
		end
		return retval
	end;

	-- PPD file versions. For the file version, pick chisel.version, and add
	-- the revision number from the printer data in between parentheses.
	[[*FormatVersion: "4.3"]],
	[[*PSVersion: "(3000.000) 100"]],
	function (data)
		return sprintf ("*FileVersion: \"%s(%i)\"",
		                chisel.version,
		                data.revision or 0)
	end;

	-- Generate options. This deserves a separate function...
	ppd_template_options;
}


return object:clone {
	ppd = function (self)
		local result = {}
		for _, v in ipairs (ppd_template) do
			if type (v) == "function" then
				v = v (self)
			else
				v = tostring (v)
			end
			tinsert (result, v)
		end
		return tconcat (result, "\n")
	end;

	get = function (name)
		return require("data/" .. name)
	end;

	extend = function (self, arg)
		if type (arg) == "string" then
			local base = require("data/" .. arg)
			return function (t)
				return base:clone (t)
			end
		else
			return object.extend (self:clone (), arg)
		end
	end;
}


